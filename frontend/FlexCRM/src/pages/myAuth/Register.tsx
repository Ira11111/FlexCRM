import React, {useState} from "react";
import {Link, useNavigate} from "react-router-dom";
import Loader from "../../components/Loader/Loader.tsx";
import Svglogo from "../../assets/crmLogo.svg";
import './auth.css'

import {ACCESS_TOKEN, REFRESH_TOKEN, ROLE} from "../../constants.ts";
import {jwtDecode} from "jwt-decode";
import {post} from "../../fetchData.ts";


function Register(props: {mode: string}) {
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [cpassword, setcPassword] = useState('');
    const [loading, setLoading] = useState(false);
    const [role, setRole] = useState('Admins')
    const navigate = useNavigate();
    const [dataIsCorrect, setDataIsCorrect] = useState('')

    const actionTitle = props.mode !== 'register' ? '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
    const action = props.mode !== 'register' ? '–î–æ–±–∞–≤–∏—Ç—å' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault()
        if (password !== cpassword) {
            setDataIsCorrect('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
        }
        else {
            setLoading(true);
            try {
                if (props.mode === 'register'){
                    localStorage.clear()
                    await post('/auth/register/', {username, password, email, user_group: role});
                    }
                else {
                    await post('/auth/users/', {username, password, email, user_group: role})
                }
                if (props.mode==='register'){
                    const resTokens = await post('/auth/token/obtain/', {username, password})
                    localStorage.setItem(ACCESS_TOKEN, resTokens.data.access);
                    localStorage.setItem(REFRESH_TOKEN, resTokens.data.refresh);
                    localStorage.setItem(ROLE, jwtDecode(resTokens.data.access).user_group)
                }
            } catch (e : any){
                if ( e.response.data.username && e.response.data.username.indexOf('A user with that username already exists.' )!==-1) {
                    setDataIsCorrect('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Çüòà')

                }
                if (e.response.data.detail && e.response.data.detail === 'User with this email already exists') {
                    setDataIsCorrect('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Çüòà')
                }


            } finally {
                setLoading(false);
                navigate('/crm');

            }
        }
    }
    return (
        <div className='auth'>
            {props.mode==='register' && <Link className='link' to='/'><img className='auth-form__logo' src={Svglogo} alt={'–õ–æ–≥–æ'}/></Link>}
            <div className='auth-form__wrapper'>
                <form className='auth-form' onSubmit={handleSubmit} method="post">
                    <h1 className='auth-form__title'>{actionTitle}</h1>

                    <label hidden={true} htmlFor='username'>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                    <input className='input' required={true} id='username' type='text'  placeholder='–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                           onChange={(e)=> setUsername(e.target.value)}/>

                    <label hidden={true} htmlFor='email'>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</label>
                    <input className='input' required={true} id='email' type='email' name='email' placeholder='–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É'
                           onChange={(e)=> setEmail(e.target.value)}/>
                    {
                        props.mode==='create' &&
                        <>
                        <label  hidden={true} htmlFor='role'>–†–æ–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞</label>
                        <select  className={'select'} id='role' required onChange={(e)=>{setRole(e.target.value)} }>
                            <option className={'select__option'} value={'Admins'}>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                            <option className={'select__option'} value={'Managers'}>–ú–µ–Ω–µ–¥–∂–µ—Ä</option>
                            <option className={'select__option'} value={'Marketers'}>–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥</option>
                            <option className={'select__option'} value={'Operators'}>–û–ø–µ—Ä–∞—Ç–æ—Ä</option>
                        </select>
                        </>
                    }
                    <label hidden={true} htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
                    <input className='input' required minLength={8} id={"password"} placeholder='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' type='password' value={password}
                           onChange={(e)=> setPassword(e.target.value)}/>

                    <label hidden={true} htmlFor="cpassword">–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
                    <input className='input' required minLength={8} id={"cpassword"} placeholder='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑' type='password' value={cpassword}
                           onChange={(e)=> setcPassword(e.target.value)}/>
                    <p className='error-message'>{dataIsCorrect}</p>
                    <button className='auth-form__button button' type="submit">{action}</button>
                </form>
                {props.mode==='register' && <p className='auth-form__descr'>–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <Link className='link' to='/login'>–í–æ–π—Ç–∏</Link></p>}
            </div>
            {loading && <Loader/>}

        </div>
    );
}

export default Register;